<?php

/**
 * @file
 * Adds the required Javascript to the checkout completion page to allow
 * e-commerce statistics tracking through Google Analytics.
 *
 * Refer to http://code.google.com/apis/analytics/docs/gaTrackingEcommerce.html
 * for documentation on the functions used to submit e-commerce statistics to
 * Google Analytics.
 */

/**
 * Build the push array needed by ga_push_add.
 *
 * @param object $order
 *   The order to be pushed.
 */
function commerce_google_analytics_build_push_array($order) {

  // Make sure the order is an order object.
  if (!($order instanceof EntityMetadataWrapper)) {
    $order = entity_metadata_wrapper('commerce_order', $order);
  }

  // Check if the commerce_tax module is enabled and generate the total tax sum.
  $tax_sum = 0;
  if (module_exists('commerce_tax')) {
    foreach (commerce_tax_rates() as $name => $tax_rate) {
      if ($tax_rate['price_component']) {
        $tax_component = commerce_price_component_load($order->commerce_order_total->value(), $tax_rate['price_component']);
        // Some taxes may not have been applied.
        if (isset($tax_component[0]['price']['amount'])) {
          $tax_sum += commerce_currency_amount_to_decimal($tax_component[0]['price']['amount'], $tax_component[0]['price']['currency_code']);
        }
      }
    }
  }

  // Check if the commerce_shipping module is enabled and generate the total
  // shipping cost of the order.
  $shipping = 0;
  if (module_exists('commerce_shipping')) {
    foreach ($order->commerce_line_items as $item) {
      if ($item->type->value() == 'shipping') {
        $shipping += commerce_currency_amount_to_decimal($item->commerce_total->amount->value(), $item->commerce_total->currency_code->value());
      }
    }
  }
  // Get the billing and shipping profiles and check if the adress fields are
  // enabled.
  $profile = NULL;
  if (isset($order->commerce_customer_billing) && $order->commerce_customer_billing->value()) {
    $profile = commerce_customer_profile_load($order->commerce_customer_billing->profile_id->value());
  }
  elseif (isset($order->commerce_customer_shipping) && $order->commerce_customer_shipping->value()) {
    $profile = commerce_customer_profile_load($order->commerce_customer_shipping->profile_id->value());
  }

  $address = NULL;
  if ($profile) {
    $profile_wrapper = entity_metadata_wrapper('commerce_customer_profile', $profile);
    if (isset($profile_wrapper->commerce_customer_address)) {
      $address = $profile_wrapper->commerce_customer_address->value();
      $address_field = addressfield_generate($address, array('address'), array('mode' => 'render'));

      // Get country human readable name.
      $country_code = $address['country'];
      if (!empty($country_code)) {
        $address['country'] = $address_field['country']['#options'][$country_code];
      }

      // Get state human readable name - but only if there was a select list.
      if (!empty($address_field['locality_block']['administrative_area']['#options'])) {
        $state_code = $address['administrative_area'];
        $address['administrative_area'] = $address_field['locality_block']['administrative_area']['#options'][$state_code];
      }
    }
  }

  // Build the transaction array.
  $transaction = array(
    'order_id' => $order->order_id->value(),
    'affiliation' => variable_get('site_name', 'Commerce Shop'),
    'total' => commerce_currency_amount_to_decimal($order->commerce_order_total->amount->value(), $order->commerce_order_total->currency_code->value()),
    'currency' => $order->commerce_order_total->currency_code->value(),
    'total_tax' => $tax_sum,
    'total_shipping' => $shipping,
    'city' => (isset($address['locality']) ? $address['locality'] : ''),
    'region' => (isset($address['administrative_area']) ? $address['administrative_area'] : ''),
    'country' => (isset($address['country']) ? $address['country'] : ''),
  );

  // Loop through the products on the order.
  $items = array();
  foreach ($order->commerce_line_items as $line_item) {
    $category = '';

    // TODO: Add find a category for the line item.
    if (empty($category)) {
      $category = t('No category');
    }

    $properties = $line_item->getPropertyInfo();
    if (isset($properties['commerce_product']) && !empty($line_item->value()->commerce_product[LANGUAGE_NONE][0]['product_id'])) {
      // Build the item arguments.
      $item = array(
        'order_id' => $order->order_id->value(),
        'sku' => $line_item->commerce_product->sku->value(),
        'name' => $line_item->commerce_product->title->value(),
        'category' => $category,
        'price' => commerce_currency_amount_to_decimal($line_item->commerce_unit_price->amount->value(), $line_item->commerce_unit_price->currency_code->value()),
        'currency' => $line_item->commerce_unit_price->currency_code->value(),
        'quantity' => (int) $line_item->quantity->value(),
      );
    }
    else {
      $item = array(
        'order_id' => $order->order_id->value(),
        'sku' => $line_item->type->value(),
        'name' => $line_item->line_item_label->value(),
        'category' => $category,
        'price' => commerce_currency_amount_to_decimal($line_item->commerce_unit_price->amount->value(), $line_item->commerce_unit_price->currency_code->value()),
        'currency' => $line_item->commerce_unit_price->currency_code->value(),
        'quantity' => (int) $line_item->quantity->value(),
      );
    }

    // Allow modules to alter the item arguments.
    $context = array(
      'transaction' => $transaction,
      'order' => $order,
    );
    drupal_alter('commerce_google_analytics_item', $item, $line_item, $context);

    $items[] = $item;
  }

  $push = array(
    'trans' => $transaction,
    'items' => $items,
  );

  return $push;
}

/**
 * Callback for the rules action which creates the javascript.
 *
 * Uses the $order and stores the script in the session to inject it using
 * hook_init on the next page request.
 *
 * @param object $order
 *   The order object
 * @param string $method_key
 *   The ga_push method key
 */
function commerce_google_analytics_send_order($order, $method_key) {
  // Build the push array and send it to ga_push.
  $push = commerce_google_analytics_build_push_array($order);
  ga_push_add($push, GA_PUSH_TYPE_ECOMMERCE, $method_key);
}
