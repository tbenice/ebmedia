<?php

/**
 * @file
 * Allows users with valid permissions to tag profile fields created
 * from the profile module as required fields for a
 * users profile to be considered complete.
 */

include_once('pcp.admin.inc');
include_once('pcp.rules.inc');

/**
 * Implements hook_theme().
 */
function pcp_theme($existing, $type, $theme, $path) {
  return array(
    'pcp_template' => array(
      'template' => 'pcp-template',
      'variables' => array('complete_data' => NULL),
    ),
  );
}

/**
 * Implements hook_permission().
 */
function pcp_permission() {
  return array(
    'administer pcp' => array(
      'title' => t('Administer Profile Complete Percentages'),
      'description' => t('Allows a user to configure which fields to be considered complete.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function pcp_menu() {
  $items['admin/config/people/pcp'] = array(
    'title' => 'Profile Complete Percentages',
    'description' => 'Tag profile fields as required for percent complete handling.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pcp_admin_settings'),
    'access arguments' => array('administer pcp'),
    'file' => 'pcp.admin.inc',
    'weight' => 10,
  );

  return $items;
}

/**
 * Implements hook_block_info().
 */
function pcp_block_info() {

  // Create block for core user profiles.
  $blocks['pcp_profile_percent_complete'] = array(
    'info' => t('Profile Complete Percentage - Core Profile'),
  );

  // Create a block for each profile2 profile type.
  if ($profile2_entity = entity_get_info('profile2')) {
    foreach ($profile2_entity['bundles'] as $bundle => $values) {
      $block_name = _pcp_block_identifier($bundle);
      $blocks[$block_name] = array(
        'info' => t('Profile Complete Percentage - ' . $values['label']),
      );
    }
  }

  return $blocks;
}

/**
 * Helper function to retrieve the block identifier.
 * Because block names cannot be longer than 32 characters, we
 * make a md5 string if it's longer.
 */
function _pcp_block_identifier($bundle) {
  $block_name = 'pcp_profile2_' . $bundle;
  if (strlen($block_name) > 32) {
    $block_name = md5($block_name);
  }
  return $block_name;
}

/**
 * Implements hook_block_view().
 */
function pcp_block_view($delta = '') {
  global $user;
  $block = array();

  //The $delta parameter tells us which block is being requested.
  switch ($delta) {
    case 'pcp_profile_percent_complete':

      $out = pcp_get_complete_percentage_data('user', 'user', $user);
      $hide = variable_get('pcp_hide_block_on_complete', 0);

      if (($hide && ($out['incomplete'] == 0)) || empty($out)) {
        $subject = '';
        $content = '';
      }
      else {
        drupal_add_css(drupal_get_path('module', 'pcp') . '/css/pcp.theme.css');
        $subject = t('Profile Complete');
        $content = theme('pcp_template', $out);
      }

      $block['subject'] = $subject;
      $block['content'] = $content;

      break;

    // Generate content for each profile2 profile type's pcp block.
    default:

      if ($profile2_entity = entity_get_info('profile2')) {
        foreach ($profile2_entity['bundles'] as $bundle => $values) {
          if ($delta == _pcp_block_identifier($bundle)) {

            $out = pcp_get_complete_percentage_data('profile2', $bundle, $user);
            $hide = variable_get('pcp_profile2_' . $bundle . '_hide_block_on_complete', 0);
            // If the block should be hidden, hide it.
            if (($hide && ($out['incomplete'] == 0)) || empty($out)) {
              $subject = '';
              $content = '';
            }
            else {
              drupal_add_css(drupal_get_path('module', 'pcp') . '/css/pcp.theme.css');
              $subject = t('Profile Complete');
              $content = theme('pcp_template', $out);
            }

            $block['subject'] = t('Profile Complete Percentage - @label', array('@label' => $values['label']));
            $block['content'] = $content;
          }
        }
      }
      break;
  }

  return $block;
}

/**
 * Get the profile complete percentage data for a given user.
 *
 * @param $user
 *   User object
 *
 * @return
 *   PCP data array.
 */
function pcp_get_complete_percentage_data($entity_type, $bundle, $user) {
  $entity_fields = field_info_instances($entity_type, $bundle);

  // Determine which fields have been tagged for evaluation.
  $profile_fields = pcp_get_tagged_profile_fields(NULL, $entity_type, $bundle);
  $additional_fields = pcp_get_additional_tagged_fields(NULL, $entity_type, $bundle);
  $fields = $profile_fields + $additional_fields;

  // We need to define these values here in case $data is returned early.
  $data = array();
  $data['entity_type'] = $entity_type;
  $data['bundle'] = $bundle;

  // If no fields have been tagged, indicate that the profile is complete.
  if (!$fields) {
    $data['current_percent'] = 100;
    $data['incomplete'] = 0;
    return $data;
  }

  // Gather all profile values for this user.
  $user_profile_values = pcp_get_user_profile_values($user->uid, $entity_type, $bundle);
  $user_additional_values = pcp_get_user_additional_values($user->uid, $entity_type, $bundle);
  $user_values = $user_profile_values + $user_additional_values;
  
  //grab any default values defined by modules
  $default_values = module_invoke_all('pcp_default_field_values');
  // Enumerate empty fields by comparing tagged fields to user profile values.
  $empty_fields = array();
  foreach ($fields as $key => $field) {
    if(isset($default_values[$entity_type][$bundle][$field]) && (isset($user_values[$key]))) {
      if ($user_values[$key] == $default_values[$entity_type][$bundle][$field]['value']) {
        $empty_fields[$key] = $field;
      }
    }
    elseif(empty($user_values[$key])) {
      $empty_fields[$key] = $field;
    }
  }
  // If there is one empty field or more
  if ($empty_fields) {
    $data['uid'] = $user->uid;

    // Pick up a random field, we won't use shuffle because it reindex the array
    // keys
    $fiid = array_rand($empty_fields);

    if (is_numeric($fiid)) {
      $field_title = $entity_fields[$fields[$fiid]]['label'];
      $field_name = $fields[$fiid];
    }
    elseif ($fiid == 'user_picture') {
      $field_title = $fields[$fiid]['title'];
      $field_name = $fields[$fiid]['name'];
    }

    $data['nextfield_id'] = $fiid;
    $data['nextfield_title'] = $field_title;
    $data['nextfield_name'] = $field_name;
  }

  $fields_count = count($fields);
  $empty_fields_count = count($empty_fields);

  $completed_fields = $fields_count - $empty_fields_count;
  $current_percent = number_format(($completed_fields / $fields_count), 2) * 100;
  $next_percent = number_format((($completed_fields + 1) / $fields_count), 2) * 100;

  $data['completed']  = $completed_fields;
  $data['incomplete'] = $empty_fields_count;
  $data['total'] = $fields_count;

  $data['current_percent'] = $current_percent;
  $data['next_percent'] = $next_percent;

  return $data;
}

/**
 * Get all the profile fields stored in the system, tagged or not tagged.
 */
function pcp_get_profile_fields($params) {

  $instances = field_read_instances($params);
  $fields = array();
  foreach ($instances as $instance) {
    $fields[$instance['id']] = $instance['field_name'];
  }
  return $fields;
}

/**
 * Get all the profile fields that have been tagged.
 * If an $fiid is passed in, only the data for that field will be returned.
 *
 * @param $fiid
 *   (optional) NULL The field instance id of the field data should be returned for. If null, all fields
 *   are returned.
 * @param $entity_type
 *   (optional) NULL The type of entity to return fields for.
 * @param $bundle
 *   (optional) NULL The bundle to return fields for.
 *
 * @return
 *   field instance ID(s) and name(s).
 */
function pcp_get_tagged_profile_fields($fiid = NULL, $entity_type = NULL, $bundle = NULL) {

  $enabled_fields = variable_get('pcp_enabled_fields', array());
  if (empty($enabled_fields)) {
    return array();
  }

  $query = db_select('field_config_instance', 'fci');
  $query->addField('fci', 'id', 'fiid');
  $query->addField('fci', 'field_name', 'field_name');
  $query->condition('fci.deleted', 0);

  $or = db_or();
  foreach ($enabled_fields as $field_id) {
    $or->condition('fci.id', $field_id);
  }
  $query->condition($or);

  if (isset($entity_type)) {
    $query->condition('entity_type', $entity_type);
  }

  if (isset($bundle)) {
    $query->condition('bundle', $bundle);
  }

  if (isset($fiid)) {
    $query->condition('id', $fiid);
  }

  $result = $query->execute();

  $fields = array();
  foreach ($result as $row) {
    $fields[$row->fiid] = $row->field_name;
  }

  return $fields;
}

/**
 * Get all additional tagged fields that where not created
 * using the profile module. This allows additional PCP
 * support for other drupal features.
 */
function pcp_get_additional_tagged_fields($uid, $entity_type, $bundle = NULL) {
  $fields = array();

  // Enable user picture support.
  if ($entity_type == 'user' && variable_get('pcp_enable_user_picture', 0)) {
    $fields['user_picture'] = array(
      'fiid' => 'user_picture',
      'title' => 'User Picture',
      'name' => 'picture_upload',
    );
  }

  return $fields;
}

/**
 * Return a users profile field values that have been saved
 * for a given user.
 *
 * @param int $uid
 *   The uid of the user we are returning data for.
 * @param $entity_type
 *   The type of entity to return fields for.
 * @param $bundle
 *   (optional) NULL The bundle to return fields for
 *
 * @return assoc array of all profile fields for the user.
 */
function pcp_get_user_profile_values($uid, $entity_type, $bundle = NULL) {
  $fields = field_info_instances($entity_type, $bundle);
  $user = user_load($uid);
  $user_fields = array();

  // Grab profile values from core profile fields.
  if ($entity_type == 'user') {
    foreach ($fields as $field) {
      $fiid = $field['id'];
      $user_fields[$fiid] = $user->$field['field_name'];
    }
  }

  // If user has profile2 profile, grab values from it.
  elseif ($entity_type == 'profile2' && $profile = profile2_load_by_user($user, $bundle)) {
    foreach ($fields as $field_name => $field_values) {
      if ($field = $profile->$field_name) {
        $fiid = $field_values['id'];
        $user_fields[$fiid] = $field['und'][0];
      }
    }
  }

  // Note, entity type user will return empty fields, whereas entity type profile2 will
  // only return non-empty fields.

  return $user_fields;
}

/**
 * Return a users additional field values that have been saved
 * for a given user.
 *
 * @param int $uid
 *   The uid of the user we are returning data for.
 * @param $entity_type
 *   The type of entity to return fields for.
 * @param $bundle
 *   (optional) NULL The bundle to return fields for
 *
 * @return assoc array of all profile fields for the user.
 */
function pcp_get_user_additional_values($uid, $entity_type, $bundle = NULL) {
  $values = array();

  if ($uid && $entity_type == 'user') {
    $account = user_load($uid);
    $values['user_picture'] = $account->picture;

  }
  return $values;
}

/**
 * Implements hook_form_FORM_ID_alter().
 * We need an extra submit handler to delete the PCP field settings when a field is deleted
 */
function pcp_form_field_ui_field_delete_form_alter(&$form, &$form_state) {
  if (in_array($form['entity_type']['#value'], array('profile2', 'user'))) {
    $form['#submit'] = array_merge(array('pcp_delete_field_requireness'), $form['#submit']);
  }
}

/**
 * Called when a user deletes a profile field
 * We then need to delete the pcp value too
 */
function pcp_delete_field_requireness($form, &$form_state) {
  $instance = field_info_instance($form_state['values']['entity_type'], $form_state['values']['field_name'], $form_state['values']['bundle']);
  _pcp_disable_field($instance['id']);
}

/**
 * Implements hook_form_alter()
 */
function pcp_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'user_profile_form') {
    // Add JS that will hightlight target field.
    drupal_add_js(drupal_get_path('module', 'pcp') . '/pcp.js');
  }
}

/**
 * Process variables for pcp-template.tpl.php.
 *
 * @see pcp-template.tpl.php
 */
function template_preprocess_pcp_template(&$variables) {
  if (isset($variables['nextfield_name'])) {
    $field = field_info_instance($variables['entity_type'], $variables['nextfield_name'], $variables['bundle']);
    // Generate URL to edit next field for core user profile.
    if ($variables['entity_type'] == 'user') {
      $input_name = 'edit-' . str_replace('_', '-', $variables['nextfield_name']);
      $user_edit_path = 'user/' . $variables['uid'] . '/edit';
      $variables['next_path'] = url($user_edit_path, array('absolute' => TRUE, 'fragment' => $input_name, 'query' => array(drupal_get_destination())));
      //drupal_add_js(array('pcp' => array('hightlight_field' => $input_name)), array('type' => 'setting'));
    }

    // Generate URL to edit next field for profile2 profile.
    elseif ($variables['entity_type'] == 'profile2') {
      $bundle = $variables['bundle'];
      $input_name = 'edit-profile-' . str_replace('_', '-', $bundle) . '-' . str_replace('_', '-', $variables['nextfield_name']);

      // The profile2 edit path pattern changed after version 1.1.
      $old_profile_edit_path = 'profile-' . $bundle . '/' . $variables['uid'] . '/edit';
      $new_profile_edit_path = 'user/' . $variables['uid'] . '/edit/' . $bundle;
      $profile2_version = pcp_get_profile2_version();
      if (is_numeric($profile2_version) && $profile2_version <= 1.1 ? $profile_edit_path = $old_profile_edit_path : $profile_edit_path = $new_profile_edit_path);

      $variables['next_path'] = url($profile_edit_path, array('absolute' => TRUE, 'fragment' => $input_name, 'query' => array(drupal_get_destination())));
      //drupal_add_js(array('pcp' => array('hightlight_field' => $input_name)), array('type' => 'setting', 'weight' => 100, 'group' => 'JS_THEME'));

    }
  }
}

/**
 * Determines version of profile2 module.
 */
function pcp_get_profile2_version() {
  $path = drupal_get_path('module', 'profile2');
  $info = drupal_parse_info_file($path .'/profile2.info');
  $version = $info['version'];
  $module_version = substr($version, 4, strlen($version));

  return $module_version;
}

function _pcp_disable_field($fiid) {
  $enabled_fields = variable_get('pcp_enabled_fields', array());
  if (in_array($fiid, $enabled_fields)) {
    $key = array_search($fiid, $enabled_fields);
    unset($enabled_fields[$key]);
    variable_set('pcp_enabled_fields', $enabled_fields);
    return TRUE;
  }
  return FALSE;
}

function _pcp_enable_field($fiid) {
  $enabled_fields = variable_get('pcp_enabled_fields', array());
  if (!in_array($fiid, $enabled_fields)) {
    $enabled_fields[] = $fiid;
    variable_set('pcp_enabled_fields', $enabled_fields);
    return TRUE;
  }
  return FALSE;
}
