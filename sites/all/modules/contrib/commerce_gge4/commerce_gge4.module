<?php

/**
 * @file
 * Implements Authorize.Net payment services for use in Drupal Commerce.
 */
require_once('commerce_gge4.inc');

// Global Gateway transaction mode definitions:
define('GGE4_TXN_MODE_LIVE', 'live');
define('GGE4_TXN_MODE_LIVE_TEST', 'live_test');
define('GGE4_TXN_MODE_DEVELOPER', 'developer');


/**
 * Implements hook_menu().
 */
function commerce_gge4_menu() {
  $items = array();

  // Add a menu item for capturing authorizations.
  $items['admin/commerce/orders/%commerce_order/payment/%commerce_payment_transaction/gge4-capture'] = array(
    'title' => 'Capture',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_gge4_capture_form', 3, 5),
    'access callback' => 'commerce_gge4_capture_access',
    'access arguments' => array(3, 5),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'context' => MENU_CONTEXT_INLINE,
    'weight' => 2,
    'file' => 'includes/commerce_gge4.admin.inc',
  );

  return $items;
}

/**
 * Determines access to the prior authorization capture form for GGE4
 *   credit card transactions.
 *
 * @param $order
 *   The order the transaction is on.
 * @param $transaction
 *   The payment transaction object to be captured.
 *
 * @return
 *   TRUE or FALSE indicating capture access.
 */
function commerce_gge4_capture_access($order, $transaction) {
  // Return FALSE if the transaction isn't for GGE4 or isn't
  // awaiting capture.
  if ($transaction->payment_method != 'gge4' || strtoupper($transaction->remote_status) != 'AUTH_ONLY') {
    return FALSE;
  }

  // Return FALSE if it is more than 30 days past the original authorization.
  if (time() - $transaction->created > 86400 * 30) {
    return FALSE;
  }

  // Allow access if the user can update payments on this transaction.
  return commerce_payment_transaction_access('update', $transaction);
}

/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_gge4_commerce_payment_method_info() {
  $payment_methods = array();

  $payment_methods['gge4'] = array(
    'base' => 'commerce_gge4',
    'title' => t('Global Gateway E4 - Credit Card'),
    'short_title' => t('GGE4 CC'),
    'display_title' => t('Credit card'),
    'description' => t('Integrates First Data Global Gateway E4 for card not present CC transactions.'),
  );

  return $payment_methods;
}

/**
 * Payment method callback: settings form.
 */
function commerce_gge4_settings_form($settings = NULL) {
  $form = array();

  // Merge default settings into the stored settings array.
  $settings = (array) $settings + array(
    'user_name' => '',
    'gateway' => '',
    'password' => '',
    'txn_mode' => GGE4_TXN_MODE_LIVE_TEST,
    'txn_type' => COMMERCE_CREDIT_AUTH_CAPTURE,
    'email_customer' => FALSE,
    'log' => array('request' => '0', 'response' => '0'),
  );

  $form['user_name'] = array(
    '#type' => 'textfield',
    '#title' => t('User Name'),
    '#description' => t('User Name you use to login to First Data'),
    '#default_value' => $settings['user_name'],
    '#required' => TRUE,
  );

  $form['gateway'] = array(
    '#type' => 'textfield',
    '#title' => t('Gateway ID'),
    '#description' => t('Gateway ID found in the settings for your Global Gateway E4 terminal'),
    '#default_value' => $settings['gateway'],
    '#required' => TRUE,
  );
  $form['password'] = array(
    '#type' => 'textfield',
    '#title' => t('Gateway Password'),
    '#description' => t('Gateway password found in the settings for your Global Gateway E4 terminal'),
    '#default_value' => $settings['password'],
    '#required' => TRUE,
  );
  $form['txn_mode'] = array(
    '#type' => 'radios',
    '#title' => t('Transaction mode'),
    '#description' => t('Adjust to live transactions when you are ready to start processing real payments.') . '<br />' . t('Only specify a developer test account if you login to your account through https://demo.globalgatewaye4.firstdata.com.'),
    '#options' => array(
      GGE4_TXN_MODE_LIVE => t('Live transactions in a live account'),
      GGE4_TXN_MODE_LIVE_TEST => t('Test transactions in a live account'),
      GGE4_TXN_MODE_DEVELOPER => t('Developer test account transactions'),
    ),
    '#default_value' => $settings['txn_mode'],
  );
  $form['txn_type'] = array(
    '#type' => 'radios',
    '#title' => t('Default credit card transaction type'),
    '#description' => t('The default will be used to process transactions during checkout.'),
    '#options' => array(
      COMMERCE_CREDIT_AUTH_CAPTURE => t('Authorization and capture'), // "purchase" transaction type with GGE4
      COMMERCE_CREDIT_AUTH_ONLY => t('Authorization only (requires manual or automated capture after checkout)'),
    ),
    '#default_value' => $settings['txn_type'],
  );
  /*$form['email_customer'] = array(
    '#type' => 'checkbox',
    '#title' => t('Tell First Data to e-mail the customer a receipt based on your account settings.'),
    '#default_value' => $settings['email_customer'],
    );*/
  $form['log'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Log the following messages for debugging'),
    '#options' => array(
      'request' => t('API request messages'),
      'response' => t('API response messages'),
    ),
    '#default_value' => $settings['log'],
  );

  return $form;
}

/**
 * Payment method callback: checkout form.
 */
function commerce_gge4_submit_form($payment_method, $pane_values, $checkout_pane, $order) {
  module_load_include('inc', 'commerce_payment', 'includes/commerce_payment.credit_card');
  return commerce_payment_credit_card_form(array('code' => ''));
}

/**
 * Payment method callback: checkout form validation.
 */
function commerce_gge4_submit_form_validate($payment_method, $pane_form, $pane_values, $order, $form_parents = array()) {
  module_load_include('inc', 'commerce_payment', 'includes/commerce_payment.credit_card');

  // Validate the credit card fields.
  $settings = array(
    'form_parents' => array_merge($form_parents, array('credit_card')),
  );

  if (!commerce_payment_credit_card_validate($pane_values['credit_card'], $settings)) {
    return FALSE;
  }
}

/**
 * Payment method callback: checkout form submission.
 */
function commerce_gge4_submit_form_submit($payment_method, $pane_form, $pane_values, $order, $charge) {
  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
  
  // Prepare the billing address for use in the request.  
  $billing_address = $order_wrapper->commerce_customer_billing->commerce_customer_address->value();

  if (empty($billing_address['first_name'])) {
    $name_parts = explode(' ', $billing_address['name_line']);
    $billing_address['first_name'] = array_shift($name_parts);
    $billing_address['last_name'] = implode(' ', $name_parts);
  }
  else if (empty($billing_address['name_line'])) {
    $billing_address['name_line'] = 
      isset($billing_address['first_name']) ? $billing_address['first_name'] : '' .
      ' ' .
      isset($billing_address['last_name']) ? $billing_address['last_name'] : '';
  }
  
  $gge4_address = new GGE4CustomerBillingAddress(
    substr($billing_address['thoroughfare'], 0, 60),
    isset($billing_address['premise']) ? substr($billing_address['premise'], 0, 60) : '',
    substr($billing_address['locality'], 0, 40),
    substr($billing_address['administrative_area'], 0, 40),
    substr($billing_address['postal_code'], 0, 20),
    '', //phone
    $billing_address['country']
  );

  $gge4_address->name = substr($billing_address['name_line'], 0, 30);
  $gge4_address->firstname = substr($billing_address['first_name'], 0, 30);
  $gge4_address->lastname = substr($billing_address['last_name'], 0, 30);

  $gge4_card = new GGE4Card(
    $pane_values['credit_card']['number'],
    $pane_values['credit_card']['exp_month'],
    $pane_values['credit_card']['exp_year'],
    (isset($pane_values['credit_card']['code']) ? $pane_values['credit_card']['code'] : '')
  );

  $gge4_object = new GGE4(
    $payment_method['settings']['user_name'], // API user name from settings
    $payment_method['settings']['gateway'], // API gateway "exactID" from settings
    $payment_method['settings']['password'], // API gateway password from settings
    commerce_gge4_txn_type($payment_method['settings']['txn_type']), // txn type from settings
    commerce_gge4_server_url($payment_method['settings']['txn_mode']), // txn mode from settings
    $gge4_card,
    $gge4_address
  );
    
  $gge4_object->clientEmail = substr($order->mail, 0, 255);
  $gge4_object->customerRef = substr($order->uid, 0, 20);
  $gge4_object->clientIP = substr(ip_address(), 0, 15);

  // Build a description for the order.
  $description = array();

  foreach ($order_wrapper->commerce_line_items as $delta => $line_item_wrapper) {
    if (in_array($line_item_wrapper->type->value(), commerce_product_line_item_types())) {
      $description[] = round($line_item_wrapper->quantity->value(), 2) . 'x ' . $line_item_wrapper->line_item_label->value();
      $gge4_object->lineItems[] = array(
        'LineItemTotal' => $line_item_wrapper->commerce_total->amount->value(),
        'Description' => $line_item_wrapper->line_item_label->value(),
        'Quantity' => $line_item_wrapper->quantity->value(),
      );
    }
  }


  $gge4_object->referenceNo = $order->order_number;
  $gge4_object->dollarAmount = commerce_currency_amount_to_decimal($charge['amount'], $charge['currency_code']);

  // Log the request if specified.
  if ($payment_method['settings']['log']['request'] == 'request') {
    // Mask the credit card number and CVV.
    $log_gge4 = $gge4_object->toArray();
    $log_gge4['User_Name'] = str_repeat('X', strlen($log_gge4['User_Name']));
    $log_gge4['ExactID'] = str_repeat('X', strlen($log_gge4['ExactID']));
    $log_gge4['Password'] = str_repeat('X', strlen($log_gge4['Password']));

    if (!empty($log_gge4['Card_Number'])) {
      $log_gge4['Card_Number'] = str_repeat('X', strlen($log_gge4['Card_Number']) - 4) . substr($log_gge4['Card_Number'], -4);
    }

    if (!empty($log_gge4['VerificationStr2'])) {
      $log_gge4['VerificationStr2'] = str_repeat('X', strlen($log_gge4['VerificationStr2']));
    }

    watchdog('commerce_gge4', 'Global Gateway E4 request to @url: !param', array('@url' => $gge4_object->url, '!param' => '<pre>' . check_plain(print_r($gge4_object, TRUE)) . '</pre>'), WATCHDOG_DEBUG);
  }


  // Submit the request to First Data.
  $gge4_object->authorizeAndCapture();

  // Log any errors to the watchdog.
//  if ($error = curl_error($ch)) {
//    watchdog('commerce_gge4', 'cURL error: @error', array('@error' => $error), WATCHDOG_ERROR);
//    return FALSE;
//  }

  $response = json_decode($gge4_object->response->data);

  // Log the response if specified.
  if ($payment_method['settings']['log']['response'] == 'response') {
    watchdog('commerce_authnet', 'Global Gateway E4 response: !param', array('!param' => '<pre>' . check_plain(print_r($response, TRUE)) . '</pre>', WATCHDOG_DEBUG));
  }

  $response->cc_verification_str2 = '';

  // Prepare a transaction object to log the API response.
  $transaction = commerce_payment_transaction_new('gge4', $order->order_id);
  $transaction->instance_id = $payment_method['instance_id'];
  $transaction->remote_id = $response->retrieval_ref_no;
  $transaction->amount = $charge['amount'];
  $transaction->currency_code = $charge['currency_code'];
  $transaction->payload[REQUEST_TIME] = $response;

  // If we didn't get an approval response code...
  if ($response->bank_resp_code != '100') {
    // Create a failed transaction with the error message.
    $transaction->status = COMMERCE_PAYMENT_STATUS_FAILURE;
  }
  else {
    // Set the transaction status based on the type of transaction this was.
    switch ($payment_method['settings']['txn_type']) {
      case COMMERCE_CREDIT_AUTH_ONLY:
        $transaction->status = COMMERCE_PAYMENT_STATUS_PENDING;
        break;

      case COMMERCE_CREDIT_AUTH_CAPTURE:
        $transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;
        break;
    }
  }

  // Store the type of transaction in the remote status.
  $transaction->remote_status = $response->transaction_type;

  $transaction->message = $response->ctr;


  // Save the transaction information.
  commerce_payment_transaction_save($transaction);

  // If the payment failed, display an error and rebuild the form.
  if ($response->bank_resp_code != '100') {
    drupal_set_message(t('We received the following error processing your card. Please enter you information again or try a different card.'), 'error');
    drupal_set_message(check_plain($response->bank_message), 'error');
    return FALSE;
  }
}


/**
 * Returns the URL to the First Data server determined by transaction mode.
 *
 * @param $txn_mode
 *   The transaction mode that relates to the live or test server.
 *
 * @return
 *   The URL to use to submit requests to the Authorize.Net server.
 */
function commerce_gge4_server_url($txn_mode) {
  switch ($txn_mode) {
    case GGE4_TXN_MODE_LIVE:
    case GGE4_TXN_MODE_LIVE_TEST:
      return 'https://api.globalgatewaye4.firstdata.com/transaction/v11/';
    case GGE4_TXN_MODE_DEVELOPER:
      return 'https://api.demo.globalgatewaye4.firstdata.com/transaction/v11/';
  }
}

/**
 * Returns the transaction type string for Authorize.Net that corresponds to the
 *   Drupal Commerce constant.
 *
 * @param $txn_type
 *   A Drupal Commerce transaction type constant.
 */
function commerce_gge4_txn_type($txn_type) {
  switch ($txn_type) {
    case COMMERCE_CREDIT_AUTH_ONLY:
      return '01';
    case COMMERCE_CREDIT_PRIOR_AUTH_CAPTURE:
      return '02';
    case COMMERCE_CREDIT_AUTH_CAPTURE:
      return '00';
    case COMMERCE_CREDIT_REFERENCE_SET:
    case COMMERCE_CREDIT_REFERENCE_TXN:
    case COMMERCE_CREDIT_REFERENCE_REMOVE:
    case COMMERCE_CREDIT_REFERENCE_CREDIT:
      return NULL;
    case COMMERCE_CREDIT_CREDIT:
      return '04';
    case COMMERCE_CREDIT_VOID:
      return '13';
  }
}

/**
 * Returns the description of an Authorize.Net transaction type.
 *
 * @param $txn_type
 *   An Authorize.Net transaction type string.
 */
function commerce_gge4_reverse_txn_type($txn_type) {
  switch (strtoupper($txn_type)) {
    case 'AUTH_ONLY':
      return t('Authorization only');
    case 'PRIOR_AUTH_CAPTURE':
      return t('Prior authorization capture');
    case 'AUTH_CAPTURE':
      return t('Authorization and capture');
    case 'CREDIT':
      return t('Credit');
    case 'VOID':
      return t('Void');
  }
}

/**
 * Returns the message text for an AVS response code.
 */
function commerce_gge4_avs_response($code) {
  switch ($code) {
    case 'A':
      return t('Address (Street) matches, ZIP does not');
    case 'B':
      return t('Address information not provided for AVS check');
    case 'E':
      return t('AVS error');
    case 'G':
      return t('Non-U.S. Card Issuing Bank');
    case 'N':
      return t('No Match on Address (Street) or ZIP');
    case 'P':
      return t('AVS not applicable for this transaction');
    case 'R':
      return t('Retry – System unavailable or timed out');
    case 'S':
      return t('Service not supported by issuer');
    case 'U':
      return t('Address information is unavailable');
    case 'W':
      return t('Nine digit ZIP matches, Address (Street) does not');
    case 'X':
      return t('Address (Street) and nine digit ZIP match');
    case 'Y':
      return t('Address (Street) and five digit ZIP match');
    case 'Z':
      return t('Five digit ZIP matches, Address (Street) does not');
  }

  return '-';
}

/**
 * Returns the message text for a CVV match.
 */
function commerce_gge4_cvv_response($code) {
  switch ($code) {
    case 'M':
      return t('Match');
    case 'N':
      return t('No Match');
    case 'P':
      return t('Not Processed');
    case 'S':
      return t('Should have been present');
    case 'U':
      return t('Issuer unable to process request');
  }

  return '-';
}
