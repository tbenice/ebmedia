<?php
/**
 * @file
 * Install, update and uninstall functions for the Commerce Shipment Line Items
 * module.
 */

/**
 * Implements hook_schema_alter().
 *
 * Add a column to the commerce_product_type table for storing whether a
 * product type is shippable or not.
 */
function commerce_shipment_fields_schema_alter(&$schema) {
  $schema['commerce_product_type']['fields']['shippable'] = array(
    'description' => 'Boolean indicating whether or not the product type is shippable.',
    'type' => 'int',
    'size' => 'tiny',
    'not null' => TRUE,
    'default' => 0,
  );
}


/**
 * Field config and instance definitions.
 *
 * @return array
 *   The fields and their instances, keyed by field name, this module creates.
 */
function commerce_shipment_fields_installed_fields() {
  $fields = array();

  // Commerce Shipment Tracking Number field base. The shipment's tracking
  // number as provided by the shipping provider.
  $fields['field_base']['commerce_shipment_tracking_num'] = array(
    'active' => 1,
    'cardinality' => 1,
    'deleted' => 0,
    'entity_types' => array(),
    'field_name' => 'commerce_shipment_tracking_num',
    'foreign keys' => array(
      'format' => array(
        'columns' => array(
          'format' => 'format',
        ),
        'table' => 'filter_format',
      ),
    ),
    'indexes' => array(
      'format' => array(
        0 => 'format',
      ),
    ),
    'locked' => 0,
    'module' => 'text',
    'settings' => array(
      'max_length' => 255,
    ),
    'translatable' => 0,
    'type' => 'text',
  );

  // Commerce Shipment Tracking Number field instance.
  $fields['field_instance']['commerce_shipment_tracking_num'] = array(
    'bundle' => 'shipment',
    'default_value' => NULL,
    'deleted' => 0,
    'description' => '',
    'display' => array(
      'default' => array(
        'label' => 'above',
        'module' => 'text',
        'settings' => array(),
        'type' => 'text_default',
        'weight' => 0,
      ),
    ),
    'entity_type' => 'commerce_shipment',
    'field_name' => 'commerce_shipment_tracking_num',
    'label' => 'Tracking Number',
    'required' => 0,
    'settings' => array(
      'text_processing' => 0,
      'user_register_form' => FALSE,
    ),
    'widget' => array(
      'active' => 1,
      'module' => 'text',
      'settings' => array(
        'size' => 60,
      ),
      'type' => 'text_textfield',
      'weight' => 1,
    ),
  );

  // Commerce Shipment Status field base. Used in determining whether or not to
  // create a payment transaction for the shipment.
  $fields['field_base']['commerce_shipment_status'] = array(
    'active' => 1,
    'cardinality' => 1,
    'deleted' => 0,
    'entity_types' => array(),
    'field_name' => 'commerce_shipment_status',
    'foreign keys' => array(),
    'indexes' => array(
      'value' => array(
        0 => 'value',
      ),
    ),
    'locked' => 0,
    'module' => 'list',
    'settings' => array(
      'allowed_values' => array(
        'incomplete' => 'Incomplete',
        'ready_to_ship' => 'Ready to Ship',
        'shipped' => 'Shipped',
      ),
      'allowed_values_function' => '',
    ),
    'translatable' => 0,
    'type' => 'list_text',
  );

  // Commerce Shipment Status field instance.
  $fields['field_instance']['commerce_shipment_status'] = array(
    'bundle' => 'shipment',
    'default_value' => array(
      0 => array(
        'value' => 'incomplete',
      ),
    ),
    'deleted' => 0,
    'description' => '',
    'display' => array(
      'default' => array(
        'label' => 'above',
        'module' => 'list',
        'settings' => array(),
        'type' => 'list_default',
        'weight' => 1,
      ),
    ),
    'entity_type' => 'commerce_shipment',
    'field_name' => 'commerce_shipment_status',
    'label' => 'Status',
    'required' => 1,
    'settings' => array(
      'user_register_form' => FALSE,
    ),
    'widget' => array(
      'active' => 1,
      'module' => 'options',
      'settings' => array(),
      'type' => 'options_select',
      'weight' => 2,
    ),
  );

  // Commerce Shipment Merchant Shipping Cost field base. This is the actual
  // cost the merchant paid for shipping. Used for reporting.
  $fields['field_base']['commerce_shipment_merch_cost'] = array(
    'active' => 1,
    'cardinality' => 1,
    'deleted' => 0,
    'entity_types' => array(),
    'field_name' => 'commerce_shipment_merch_cost',
    'foreign keys' => array(),
    'indexes' => array(
      'currency_price' => array(
        0 => 'amount',
        1 => 'currency_code',
      ),
    ),
    'locked' => 0,
    'module' => 'commerce_price',
    'settings' => array(),
    'translatable' => 0,
    'type' => 'commerce_price',
  );

  // Commerce Shipment Merchant Shipping Cost field instance.
  $fields['field_instance']['commerce_shipment_merch_cost'] = array(
    'bundle' => 'shipment',
    'default_value' => NULL,
    'deleted' => 0,
    'description' => '',
    'display' => array(
      'default' => array(
        'label' => 'above',
        'module' => 'commerce_price',
        'settings' => array(
          'calculation' => FALSE,
        ),
        'type' => 'commerce_price_formatted_amount',
        'weight' => 2,
      ),
    ),
    'entity_type' => 'commerce_shipment',
    'field_name' => 'commerce_shipment_merch_cost',
    'label' => "Merchant's Shipping Cost",
    'required' => 0,
    'settings' => array(
      'user_register_form' => FALSE,
    ),
    'widget' => array(
      'active' => 1,
      'module' => 'commerce_price',
      'settings' => array(
        'currency_code' => 'default',
      ),
      'type' => 'commerce_price_full',
      'weight' => 3,
    ),
  );

  // Commerce Order Shipments reference field base. References all the shipments
  // created for this order.
  $fields['field_base']['commerce_shipments'] = array(
    'active' => 1,
    'cardinality' => -1,
    'deleted' => 0,
    'entity_types' => array(),
    'field_name' => 'commerce_shipments',
    'foreign keys' => array(
      'commerce_shipment' => array(
        'columns' => array(
          'target_id' => 'shipment_id',
        ),
        'table' => 'commerce_shipment',
      ),
    ),
    'indexes' => array(
      'target_id' => array(
        0 => 'target_id',
      ),
    ),
    'locked' => 0,
    'module' => 'entityreference',
    'settings' => array(
      'handler' => 'base',
      'handler_settings' => array(
        'behaviors' => array(
          'views-select-list' => array(
            'status' => 0,
          ),
        ),
        'sort' => array(
          'type' => 'none',
        ),
        'target_bundles' => array(),
      ),
      'target_type' => 'commerce_shipment',
    ),
    'translatable' => 0,
    'type' => 'entityreference',
  );

  // Commerce Order Shipments reference field instance.
  $fields['field_instance']['commerce_shipments'] = array(
    'bundle' => 'commerce_order',
    'deleted' => 0,
    'description' => '',
    'display' => array(
      'default' => array(
        'label' => 'above',
        'module' => 'entityreference',
        'settings' => array(
          'link' => FALSE,
        ),
        'type' => 'commerce_shipment_reference_view',
        'weight' => -4,
      ),
    ),
    'entity_type' => 'commerce_order',
    'field_name' => 'commerce_shipments',
    'label' => 'Commerce Shipments',
    'required' => 0,
    'settings' => array(
      'user_register_form' => FALSE,
    ),
    'widget' => array(
      'active' => 1,
      'module' => 'inline_entity_form',
      'settings' => array(
        'fields' => array(),
        'type_settings' => array(
          'allow_existing' => 0,
          'delete_references' => 1,
          'label_plural' => 'shipments',
          'label_singular' => 'shipment',
          'match_operator' => 'CONTAINS',
          'override_labels' => 0,
        ),
      ),
      'type' => 'inline_entity_form',
      'weight' => -4,
    ),
  );

   // Commerce Shipment field base for tracking line items in a shipment.
  $fields['field_base']['commerce_shipment_line_items'] = array(
    'active' => 1,
    'cardinality' => -1,
    'deleted' => 0,
    'entity_types' => array(),
    'field_name' => 'commerce_shipment_line_items',
    'foreign keys' => array(
      'commerce_line_item' => array(
        'columns' => array(
          'target_id' => 'line_item_id',
        ),
        'table' => 'commerce_line_item',
      ),
    ),
    'indexes' => array(
      'target_id' => array(
        0 => 'target_id',
      ),
    ),
    'locked' => 0,
    'module' => 'entityreference',
    'settings' => array(
      'handler' => 'commerce_shipment_selection_handler',
      'handler_settings' => array(
        'behaviors' => array(
          'views-select-list' => array(
            'status' => 0,
          ),
        ),
        'sort' => array(
          'type' => 'none',
        ),
        'target_bundles' => array(),
      ),
      'target_type' => 'commerce_line_item',
    ),
    'translatable' => 0,
    'type' => 'entityreference',
  );

  // Commerce Shipment Line Items field instance config.
  $fields['field_instance']['commerce_shipment_line_items'] = array(
    'bundle' => 'shipment',
    'default_value' => NULL,
    'deleted' => 0,
    'description' => '',
    'display' => array(
      'default' => array(
        'label' => 'above',
        'module' => 'entityreference',
        'settings' => array(
          'link' => FALSE,
        ),
        'type' => 'entityreference_label',
        'weight' => 3,
      ),
    ),
    'entity_type' => 'commerce_shipment',
    'field_name' => 'commerce_shipment_line_items',
    'label' => 'Line Items',
    'required' => 0,
    'settings' => array(
      'user_register_form' => FALSE,
    ),
    'widget' => array(
      'active' => 1,
      'module' => 'options',
      'settings' => array(
        'match_operator' => 'CONTAINS',
        'path' => '',
        'size' => 60,
      ),
      'type' => 'options_buttons',
      'weight' => 4,
    ),
  );

  return $fields;
}

/**
 * Implements hook_install().
 */
function commerce_shipment_fields_install() {
  commerce_shipment_fields_install_fields();
}

/**
 * Create fields and field instances.
 */
function commerce_shipment_fields_install_fields() {
  $fields = commerce_shipment_fields_installed_fields();
  // Add all fields.
  foreach ($fields['field_base'] as $field) {
    // Look for existing field.
    $field_base = field_info_field($field['field_name']);
    if (empty($field_base)) {
      field_create_field($field);
    }
  }
  // Add all field instances.
  foreach ($fields['field_instance'] as $field_instance) {
    // Look for existing instance.
    $instance = field_info_instance($field_instance['entity_type'], $field_instance['field_name'], $field_instance['bundle']);
    if (empty($instance)) {
      field_create_instance($field_instance);
    }
  }

  // Add 'shippable' column to commerce_product_type table.
  db_add_field('commerce_product_type', 'shippable', array(
    'description' => 'Boolean indicating whether or not the product type is shippable.',
    'type' => 'int',
    'size' => 'tiny',
    'not null' => TRUE,
    'default' => 0,
  ));
}

/**
 * Implements hook_uninstall().
 */
function commerce_shipment_fields_uninstall() {
  // Delete the field bases, and instances, and their data that this module
  // creates.
  $fields = commerce_shipment_fields_installed_fields();
  foreach($fields['field_base'] as $field) {
    field_delete_field($field['field_name']);
  }
  // Loop over any remaining field instances attached to the 'shipment' bundle
  // and delete them individually.
  $instances = field_info_instances('commerce_shipment', 'shipment');
  foreach ($instances as $instance_name => $instance) {
    field_delete_instance($instance);
  }
  // Purge all field information.
  field_purge_batch(1000);

  //Remove the 'shippable' column from commerce_product_type table.
  db_drop_field('commerce_product_type', 'shippable');
}
