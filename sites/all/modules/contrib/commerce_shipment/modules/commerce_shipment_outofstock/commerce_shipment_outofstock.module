<?php

/**
 * @file
 * @todo Fill this out
 */

/**
 * Implements hook_commerce_payment_transaction_charge_alter().
 */
function commerce_shipment_outofstock_commerce_payment_transaction_charge_alter($order, &$charge) {
  // We don't charge for out-of-stock, shippable, items.
  if (!empty($order)) {
    $charge['amount'] = 0;
    $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
    $shipment_items = array();
    foreach ($order_wrapper->commerce_line_items as $line_item_wrapper) {
      // Add non-product type line items (e.g. shipping fee, discounts),
      // non-shippable product items (e.g. digital), and shippable in stock
      // to the transaction charge.
      if ($line_item_wrapper->type->value() == 'product') {
        $type_data = commerce_product_type_load($line_item_wrapper->commerce_product->type->value());
        $stock = isset($line_item_wrapper->commerce_product->commerce_stock) ? $line_item_wrapper->commerce_product->commerce_stock->raw() : 0;
        if ($type_data['shippable']) {
          if ($stock <= 0) {
            continue;
          }
          else {
            // It's in-stock and shippable. Add it to our items array.
            $shipment_items[] = $line_item_wrapper->line_item_id->value();
          }
        }
      }
      $charge['amount'] += $line_item_wrapper->commerce_total->amount->value();
    }
    if (!empty($shipment_items)) {
      // There are shippable in-stock line items on the order. We create and
      // save a shipment so we avoid any double-charging of items.
      $values = array(
       'type' => 'shipment',
       'order_id' => $order->order_id,
      );
      $shipment = entity_create('commerce_shipment', $values);
      $shipment_wrapper = entity_metadata_wrapper('commerce_shipment', $shipment);
      $shipment_wrapper->commerce_shipment_status = 'incomplete';
      foreach ($shipment_items as $line_item_id) {
        $shipment_wrapper->commerce_shipment_line_items[] = $line_item_id;
      }
      $shipment_wrapper->save();
      $order_wrapper->commerce_shipments[] = $shipment_wrapper->value();
      $order_wrapper->save();
    }
  }
}

/**
 * Attempts to auth+capture against all line items in $shipment.
 *
 * @param $shipment
 *  A fully loaded shipment object.
 *
 * @return
 *  A message indicating success or failure. If successful the response with
 *  card data is returned as well.
 */
function commerce_shipment_outofstock_capture_shipment($shipment) {
  // Look for a default cof for the order owner. If there is none, log it in
  // watchdog, set a message, and abort.
  $order = commerce_order_load($shipment->order_id);
  $response = commerce_cardonfile_order_select_card($order);
  $message_vars = array(
    '@order_id' => $order->order_id,
    '@uid' => $order->uid,
  );
  if ($response['code'] != COMMERCE_COF_PROCESS_CODE_CARD_OK) {
    if (isset($response['card_chosen'])) {
      // It's an expired card. Add the card_id to our message.
      $message_vars['@card_id'] = $response['card_chosen']->card_id;
    }
    watchdog('commerce_shipment_outofstock', $response['message'], $message_vars);
    return drupal_set_message(t($response['message'], $message_vars), 'warning');
  }
  // Calculate the charge to be applied.
  $shipment_wrapper = entity_metadata_wrapper('commerce_shipment', $shipment);
  $charge = array(
    'amount' => 0,
    'currency_code' => '',
  );
  foreach ($shipment_wrapper->commerce_shipment_line_items as $line_item_wrapper) {
    $charge['amount'] += $line_item_wrapper->commerce_total->amount->value();
  }
  // Attempt to charge the card.
  $balance = commerce_payment_order_balance($order);
  if (!isset($balance)) {
    watchdog('commerce_shipment_outofstock', 'Could not find a balance for order @order_id. A shipment charge was not created.', array('@order_id' => $order->order_id));
    return drupal_set_message(t('Could not find a balance for order @order_id. A shipment charge was not created.', array('@order_id' => $order->order_id)), 'warning');
  }
  // If for some odd reason charge is greater than order balance, set the charge
  // to be the order balance.
  if ($charge['amount'] > $balance['amount']) {
    $charge = $balance;
  }
  else {
    $charge['currency_code'] = $balance['currency_code'];
  }
  // Create and execute a payment transaction for the charge amount.
  $charge_response = commerce_cardonfile_order_charge_card($order, $charge, $response['card_chosen']);
  watchdog('commerce_shipment_outofstock', $charge_response['message'], $charge_response['message_variables']);
  drupal_set_message(t($charge_response['message'], $charge_response['message_variables']), 'status');
  return $charge_response;
}
