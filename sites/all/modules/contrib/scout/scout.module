<?php
/**
 * @file
 * Code for the Scout feature.
 */

// This module is dependent on the Zurb Joyride jquery library
// and for now we're locking in a dependency on version 2.0.3.
// This definition prevents the need to remove the version info from file names.

define('JOYRIDE_LIBRARY_VERSION', '2.0.3');

/**
 * Implements hook_libraries_info().
 * Return information about external libraries.
 *
 * @see http://drupal.org/documentation/modules/libraries
 */

function scout_libraries_info() {
  $libraries['joyride'] = array(
    'name' => 'Joyride',
    'vendor url' => 'http://www.zurb.com/',
    'download url' => 'https://github.com/zurb/joyride',
    'version callback' => 'scout_joyride_version',
    'version arguments' => array(
      'file' => 'jquery.joyride-' . JOYRIDE_LIBRARY_VERSION . '.js',
      // jQuery Foundation Joyride Plugin 2.0.2
      'pattern' => '/jQuery Foundation Joyride Plugin ([\d][\d\.\0]+)/',
      'lines' => 2,
    ),
    'files' => array(
      'js' => array(
        'jquery.joyride-' . JOYRIDE_LIBRARY_VERSION . '.js',
        'modernizr.mq.js'
      ),
      'css' => array(
        'joyride-' . JOYRIDE_LIBRARY_VERSION . '.css',
      ),
    ),
  );

  return $libraries;
}

/**
 * Library version callback. Make sure the library version is correct.
 */
function scout_joyride_version($library, $options) {
  // Provide defaults.
  $options += array(
    'file' => '',
    'pattern' => '',
    'lines' => 20,
    'cols' => 200,
  );
  $file = DRUPAL_ROOT . '/' . $library['library path'] . '/' . $options['file'];
  if (empty($options['file']) || !file_exists($file)) {
    return;
  }
  $file = fopen($file, 'r');
  while ($options['lines'] && $line = fgets($file, $options['cols'])) {
    if (preg_match($options['pattern'], $line, $version)) {
      if ($version[1] == JOYRIDE_LIBRARY_VERSION) {
        fclose($file);
        return $version[1];
      }
    }
    $options['lines']--;
  }
  fclose($file);
}

/**
 * Implements hook_context_plugins().
 * Let context know about plugin implementations.
 *
 * @see http://api.drupalize.me/api/drupal/function/hook_context_plugins/7
 */
function scout_context_plugins() {
  $plugins = array();

  $plugins['scout_context_reaction_trail'] = array(
    'handler' => array(
      'path' => drupal_get_path('module', 'scout') . '/plugins/context',
      'file' => 'scout_context_reaction_trail.inc',
      'class' => 'scout_context_reaction_trail',
      'parent' => 'context_reaction',
    ),
  );

  return $plugins;
}

/**
 * Implements hook_context_registry().
 * Registry hook for conditions & reactions.
 *
 * @see http://api.drupalize.me/api/drupal/function/hook_context_registry/7
 */
function scout_context_registry() {
  return array(
    'reactions' => array(
       'scout_trail' => array(
        'title' => t('Scout Trail'),
        'description' => t('Add guided tour entities to the page.'),
        'plugin' => 'scout_context_reaction_trail',
      ),
    ),
  );
}

/**
 * Implements hook_init().
 * Perform setup tasks for non-cached page requests.
 *
 * @see http://api.drupalize.me/api/drupal/function/hook_init/7
 */
function scout_init() {
  $plugin = context_get_plugin('reaction', 'scout_trail');
  if($plugin) $plugin->execute();
}

/**
 * Implements hook_theme().
 * Register a module (or theme's) theme implementations.
 *
 * @see http://api.drupalize.me/api/drupal/function/hook_theme/7
 */
function scout_theme($existing, $type, $theme, $path) {
  return array(
    'scout_trail' => array(
      'variables' => array('trail_content' => NULL),
      'template' => 'templates/scout-trail',
    ),
    'scout_help' => array(
      'variables' => array(),
      'template' => 'templates/scout-help',
    ),
    'scout_trailhead' => array(
      'variables' => array('link_title' => NULL, 'options' => array()),
      'template' => 'templates/scout-trailhead',
      'file' => 'inc/scout.theme.inc',
    ),
  );
}

/**
 * Implements hook_help().
 *
 * @see http://api.drupalize.me/api/drupal/function/hook_help/7
 */
function scout_help($path, $arg) {
  switch ($path) {
    case 'admin/help#scout':
      return theme('scout_help');
  }
}

/**
 * Implements hook_menu().
 *
 * @see
 */
function scout_menu() {
  $items = array();

  return $items;
}

/**
 * Implements hook_enable().
 * Perform necessary actions after module is enabled.
 *
 * @see http://api.drupalize.me/api/drupal/function/hook_enable/7
 */
function scout_enable() {
  // We need this to make context detect new reaction handler
  drupal_flush_all_caches();
}

/**
 * Implements hook_block_info().
 * Define all blocks provided by the module.
 *
 * @see http://api.drupalize.me/api/drupal/function/hook_block_info/7
 */
function scout_block_info() {
  $blocks['scout_trailhead'] = array(
    'info' => t('Scout: Trailhead'),
    'cache' => DRUPAL_NO_CACHE
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 * Return a rendered or renderable view of a block.
 *
 * @see http://api.drupalize.me/api/drupal/function/hook_block_view/7
 */
function scout_block_view($delta = '') {
  $block = array();

  switch ($delta) {
    case 'scout_trailhead':
      $block['subject'] = 'Scout Trail';
      $block['content'] = array(
        '#theme' => 'scout_trailhead',
      );

      break;
  }
  return $block;
}

/**
 * Implements hook_context_page_reaction().
 */
function scout_context_page_reaction(){
  if ($plugin = context_get_plugin('reaction', 'scout_trail')) {
    $plugin->execute();
  }
}

